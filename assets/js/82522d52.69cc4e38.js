"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[637],{4137:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),o=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),m=o(a),p=n,h=m["".concat(l,".").concat(p)]||m[p]||c[p]||s;return a?r.createElement(h,i(i({ref:t},d),{},{components:a})):r.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=p;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[m]="string"==typeof e?e:n,i[1]=u;for(var o=2;o<s;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7723:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>o});var r=a(7462),n=(a(7294),a(4137));const s={id:"Nums",title:"Number",sidebar_labe:"Number"},i=void 0,u={unversionedId:"Keywords/Validations/Nums",id:"Keywords/Validations/Nums",title:"Number",description:"We can make many assertions and verifications on numbers by using the Class NumberValidationsBuilder through using the following methods:",source:"@site/docs/Keywords/Validations/Nums.md",sourceDirName:"Keywords/Validations",slug:"/Keywords/Validations/Nums",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Nums",draft:!1,editUrl:"https://github.com/ShaftHQ/SHAFT_Engine_Docusaurus/blob/master/docs/Keywords/Validations/Nums.md",tags:[],version:"current",frontMatter:{id:"Nums",title:"Number",sidebar_labe:"Number"},sidebar:"docs",previous:{title:"Object",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Objects"},next:{title:"Force Fail",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/ForceFail"}},l={},o=[{value:"We can make many assertions and verifications on numbers by using the <em>Class NumberValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-numbers-by-using-the-class-numbervalidationsbuilder-through-using-the-following-methods",level:4},{value:"isEqualTo():",id:"isequalto",level:3},{value:"equals():",id:"equals",level:3},{value:"doesNotEqual():",id:"doesnotequal",level:3},{value:"isGreaterThanOrEquals():",id:"isgreaterthanorequals",level:3},{value:"isGreaterThan():",id:"isgreaterthan",level:3},{value:"isLessThanOrEquals():",id:"islessthanorequals",level:3},{value:"isLessThan():",id:"islessthan",level:3}],d={toc:o};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"we-can-make-many-assertions-and-verifications-on-numbers-by-using-the-class-numbervalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on numbers by using the ",(0,n.kt)("em",{parentName:"h4"},"Class NumberValidationsBuilder")," through using the following methods:"),(0,n.kt)("h3",{id:"isequalto"},"isEqualTo():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number is equal to the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"equals"},"equals():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This method overrides the default object method equals and is the same as calling isEqualTo((Number) expectedValue).perform();* * So we use this method to check that the actual number is equal to the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a boolean value true if passed and throws AssertionError if failed (return value can be safely ignored).")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"doesnotequal"},"doesNotEqual():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number does not equal the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"isgreaterthanorequals"},"isGreaterThanOrEquals():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number is greater than or equal to the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"isgreaterthan"},"isGreaterThan():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number is greater than the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"islessthanorequals"},"isLessThanOrEquals():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number is less than or equal to the expected value."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"islessthan"},"isLessThan():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the actual number is less than the expected value."),(0,n.kt)("li",{parentName:"ul"},"expectedValue - the test data / expected value for the number under test."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n    }\n}\n")))}m.isMDXComponent=!0}}]);