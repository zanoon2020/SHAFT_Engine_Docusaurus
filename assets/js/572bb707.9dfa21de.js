"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[5850],{4137:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(a),h=o,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return a?n.createElement(m,s(s({ref:t},d),{},{components:a})):n.createElement(m,s({ref:t},d))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,s=new Array(i);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:o,s[1]=r;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},1459:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(7462),o=(a(7294),a(4137));const i={id:"Response",title:"API",sidebar_labe:"API"},s=void 0,r={unversionedId:"Keywords/Validations/Response",id:"Keywords/Validations/Response",title:"API",description:"We can make many assertions and verifications on API response by using the Class RestValidationsBuilder through using the following methods:",source:"@site/docs/Keywords/Validations/Response.md",sourceDirName:"Keywords/Validations",slug:"/Keywords/Validations/Response",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Response",draft:!1,editUrl:"https://github.com/ShaftHQ/SHAFT_Engine_Docusaurus/blob/master/docs/Keywords/Validations/Response.md",tags:[],version:"current",frontMatter:{id:"Response",title:"API",sidebar_labe:"API"},sidebar:"docs",previous:{title:"Element",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Elements"},next:{title:"File",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Files"}},l={},c=[{value:"We can make many assertions and verifications on API response by using the <em>Class RestValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-api-response-by-using-the-class-restvalidationsbuilder-through-using-the-following-methods",level:4},{value:"isEqualToFileContent():",id:"isequaltofilecontent",level:3},{value:"doesNotEqualFileContent():",id:"doesnotequalfilecontent",level:3},{value:"containsFileContent():",id:"containsfilecontent",level:3},{value:"doesNotContainFileContent():",id:"doesnotcontainfilecontent",level:3},{value:"extractedJsonValue():",id:"extractedjsonvalue",level:3},{value:"matchesSchema():",id:"matchesschema",level:3},{value:"doesNotMatchSchema():",id:"doesnotmatchschema",level:3}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"we-can-make-many-assertions-and-verifications-on-api-response-by-using-the-class-restvalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on API response by using the ",(0,o.kt)("em",{parentName:"h4"},"Class RestValidationsBuilder")," through using the following methods:"),(0,o.kt)("h3",{id:"isequaltofilecontent"},"isEqualToFileContent():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object is equal to the expected file content."),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).isEqualToFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).isEqualToFileContent(String fileRelativePath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"doesnotequalfilecontent"},"doesNotEqualFileContent():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object is not equal to the expected file content. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotEqualFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotEqualFileContent(String fileRelativePath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"containsfilecontent"},"containsFileContent():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object contains the expected file content. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).containsFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).containsFileContent(String fileRelativePath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"doesnotcontainfilecontent"},"doesNotContainFileContent():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object does not contain the expected file content. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotContainFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotContainFileContent(String fileRelativePath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"extractedjsonvalue"},"extractedJsonValue():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to to extract a certain value from the provided actual response object and check against it. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: jsonPath - JSONPath of the target value; the JSONPath expression that will be evaluated in order to extract the desired value ","[without the trailing $.]"," , please refer to these urls for examples: ",(0,o.kt)("a",{parentName:"li",href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html"},"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html")," ",(0,o.kt)("a",{parentName:"li",href:"http://jsonpath.com/"},"http://jsonpath.com/"),"."),(0,o.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).extractedJsonValue(String jsonPath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).extractedJsonValue(String jsonPath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"matchesschema"},"matchesSchema():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object matches the schema for the expected file content. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat(.response(Object response).matchesSchema(String  fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).matchesSchema(String fileRelativePath).perform();\n    }\n}\n")),(0,o.kt)("h3",{id:"doesnotmatchschema"},"doesNotMatchSchema():"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object matches the schema for the expected file content. "),(0,o.kt)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),(0,o.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotMatchSchema(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotMatchSchema(String fileRelativePath).perform();\n    }\n}\n")))}p.isMDXComponent=!0}}]);