"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[7870],{4137:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=s,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9726:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=a(7462),s=(a(7294),a(4137));const r={id:"Request_Builder",title:"Request Builder",sidebar_label:"Request Builder"},o=void 0,i={unversionedId:"Keywords/API/Request_Builder",id:"Keywords/API/Request_Builder",title:"Request Builder",description:"SHAFT API",source:"@site/docs/Keywords/API/Request_Builder.md",sourceDirName:"Keywords/API",slug:"/Keywords/API/Request_Builder",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/API/Request_Builder",draft:!1,editUrl:"https://github.com/ShaftHQ/SHAFT_Engine_Docusaurus/blob/master/docs/Keywords/API/Request_Builder.md",tags:[],version:"current",frontMatter:{id:"Request_Builder",title:"Request Builder",sidebar_label:"Request Builder"},sidebar:"docs",previous:{title:"Touch Actions",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/GUI/Touch_Actions"},next:{title:"Response Getters",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/API/Response_Getters"}},l={},p=[{value:"SHAFT API",id:"shaft-api",level:2},{value:"Request Builder",id:"request-builder",level:2},{value:"Request Method",id:"request-method",level:3},{value:"Get",id:"get",level:4},{value:"Post",id:"post",level:4},{value:"Put",id:"put",level:4},{value:"Patch",id:"patch",level:4},{value:"Delete",id:"delete",level:4},{value:"Set Authentication",id:"set-authentication",level:3},{value:"Authentication Type BASIC",id:"authentication-type-basic",level:4},{value:"Authentication Type FORM",id:"authentication-type-form",level:4},{value:"Add Cookie",id:"add-cookie",level:3},{value:"Set Target Status Code",id:"set-target-status-code",level:3},{value:"Set Content Type",id:"set-content-type",level:3},{value:"Add Header",id:"add-header",level:3},{value:"Set Request Body",id:"set-request-body",level:3},{value:"Body as String",id:"body-as-string",level:4},{value:"Body as Hash Map",id:"body-as-hash-map",level:4},{value:"Body as JSONObject",id:"body-as-jsonobject",level:4},{value:"Set Request Body From File",id:"set-request-body-from-file",level:3},{value:"Set Parameters",id:"set-parameters",level:3},{value:"Parameters Type FORM",id:"parameters-type-form",level:4},{value:"Parameters Type QUERY",id:"parameters-type-query",level:4},{value:"Set URL Arguments",id:"set-url-arguments",level:3},{value:"Add Config",id:"add-config",level:3},{value:"Enable URL Encoding",id:"enable-url-encoding",level:3},{value:"Use Relaxed HTTPS Validation",id:"use-relaxed-https-validation",level:3},{value:"Append Default Content Charset To Content Type If Undefined",id:"append-default-content-charset-to-content-type-if-undefined",level:3},{value:"<em><strong> *Please check the Response Validations as we can make many assertions and verifications on API response by using the Class RestValidationsBuilder* </strong></em>",id:"-please-check-the-response-validations-as-we-can-make-many-assertions-and-verifications-on-api-response-by-using-the-class-restvalidationsbuilder-",level:4},{value:"Sample Code Snippet",id:"sample-code-snippet",level:2}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"shaft-api"},"SHAFT API"),(0,s.kt)("p",null,"In order to interact with APIs, you need an instance of SHAFT.API class and give it the base serviceURI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'import com.shaft.driver.SHAFT;\n\nSHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\n')),(0,s.kt)("p",null,"Now you have api object with the base serviceURI to start working with it with the Request Builder"),(0,s.kt)("h2",{id:"request-builder"},"Request Builder"),(0,s.kt)("p",null,"Now you can start building your request with the request builder and add the methods you need from the below methods.\nFinally, you need to add the ",(0,s.kt)("strong",{parentName:"p"},"perform()")," method at the end to trigger the request and get back ",(0,s.kt)("a",{parentName:"p",href:"https://www.javadoc.io/doc/io.rest-assured/rest-assured/3.0.1/io/restassured/response/Response.html"},"REST-Assured response")," object to continue working with it when needed."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," A request usually has only one of the following: urlArguments, parameters+type, or body"),(0,s.kt)("h3",{id:"request-method"},"Request Method"),(0,s.kt)("p",null,"Add the request method and give it the serviceName"),(0,s.kt)("h4",{id:"get"},"Get"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/posts").perform();\n')),(0,s.kt)("h4",{id:"post"},"Post"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.post("/posts").perform();\n')),(0,s.kt)("h4",{id:"put"},"Put"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.put("/posts/1").perform();\n')),(0,s.kt)("h4",{id:"patch"},"Patch"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.patch("/posts/1").perform();\n')),(0,s.kt)("h4",{id:"delete"},"Delete"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.delete("/posts/1").perform();\n')),(0,s.kt)("h3",{id:"set-authentication"},"Set Authentication"),(0,s.kt)("p",null,"Set the authentication method that will be used by the API request that you're currently building. By default, this value is set to AuthenticationType.NONE but you can change it by calling this method. If you use thie method the authentication token will be saved automatically for all the following requests using the same session."),(0,s.kt)("h4",{id:"authentication-type-basic"},"Authentication Type BASIC"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://postman-echo.com");\napi.get("/basic-auth").setAuthentication("postman", "password", AuthenticationType.BASIC).perform();\n')),(0,s.kt)("h4",{id:"authentication-type-form"},"Authentication Type FORM"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.get("serviceName").setAuthentication("username", "password", AuthenticationType.FORM).perform();\n')),(0,s.kt)("h3",{id:"add-cookie"},"Add Cookie"),(0,s.kt)("p",null,"Append a cookie to the current session to be used in the current and all the following requests. This feature is commonly used for authentication cookies."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").addCookie("session_id", "1234").perform();\n')),(0,s.kt)("p",null,"You can also use it directly without a request method to be used in all the following requests."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").perform();\napi.addCookie("session_id", "1234");\n')),(0,s.kt)("h3",{id:"set-target-status-code"},"Set Target Status Code"),(0,s.kt)("p",null,"Sets the expected target status code for the API request that you're currently building. By default, this value is set to 200, but you can change it by calling the ",(0,s.kt)("strong",{parentName:"p"},"setTargetStatusCode")," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/users").setTargetStatusCode(200).perform();\n')),(0,s.kt)("h3",{id:"set-content-type"},"Set Content Type"),(0,s.kt)("p",null,"Sets the content type for the API request that you're currently building.\nBy default, this value is set to ",(0,s.kt)("strong",{parentName:"p"},"ContentType.ANY")," but you can change it by calling the ",(0,s.kt)("strong",{parentName:"p"},"setContentType")," method and giving it the enum value you want."),(0,s.kt)("p",null,"contentType Enumeration of common ",(0,s.kt)("a",{parentName:"p",href:"http://www.iana.org/assignments/media-types/media-types.xhtml"},"IANA")," content-types. This may be used to specify a request or response content-type more easily than specifying the full string each time. Example: ",(0,s.kt)("strong",{parentName:"p"},"ContentType.JSON")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/users").setContentType("application/json").perform();\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/users").setContentType(ContentType.JSON).perform();\n')),(0,s.kt)("h3",{id:"add-header"},"Add Header"),(0,s.kt)("p",null,"Append a header to the current session ",(0,s.kt)("strong",{parentName:"p"},"to be used in the current and all the following requests"),".\nThis feature is commonly used for authentication tokens and other global headers as you need"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\nString token = "@1234z"\napi.post("serviceName").addHeader("Authorization", "Bearer " + token).perform();\n')),(0,s.kt)("p",null,"You can add more than one header in the same request."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\nString token = "@1234z"\napi.post("serviceName").addHeader("Authorization", "Bearer " + token).addHeader("Accept-Charset", "utf-8").perform();\n')),(0,s.kt)("p",null,"You can also use it directly without a request method to set the header for all the following requests."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").perform();\napi.addHeader("Accept-Language", "en");\n')),(0,s.kt)("h3",{id:"set-request-body"},"Set Request Body"),(0,s.kt)("p",null,"Sets the body (if any) for the API request that you're currently building."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").setRequestBody(body).perform();\n')),(0,s.kt)("h4",{id:"body-as-string"},"Body as String"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://reqres.in/");\nString body = """\n         {\n            "name": "adam",\n            "job": "engineer"\n        }""";\napi.post("api/users").setRequestBody(body).setContentType(ContentType.JSON).setTargetStatusCode(201).perform();\n')),(0,s.kt)("h4",{id:"body-as-hash-map"},"Body as Hash Map"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://reqres.in/");\nHashMap body = new HashMap<>();\nbody.put("name", "adam");\nbody.put("job", "engineer");\napi.post("api/users").setRequestBody(body).setContentType(ContentType.JSON).setTargetStatusCode(201).perform();\n')),(0,s.kt)("h4",{id:"body-as-jsonobject"},"Body as JSONObject"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://reqres.in/");\nJSONObject body = new JSONObject();\nbody.put("name", "adam");\nbody.put("job", "engineer");\napi.post("api/users").setRequestBody(body).setContentType(ContentType.JSON).setTargetStatusCode(201).perform();\n')),(0,s.kt)("h3",{id:"set-request-body-from-file"},"Set Request Body From File"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").setRequestBodyFromFile("relativeFilePath").perform();\n')),(0,s.kt)("p",null,'Having a request body as json file in this path "src/test/resources/testDataFiles/requestBody.json" like this:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "morpheus",\n  "job": "leader"\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://reqres.in/");\napi.post("api/users").setRequestBodyFromFile("src/test/resources/testDataFiles/requestBody.json").setTargetStatusCode(201).setContentType(ContentType.JSON).perform();\n')),(0,s.kt)("h3",{id:"set-parameters"},"Set Parameters"),(0,s.kt)("p",null,"Sets the parameters (if any) for the API request that you're currently building."),(0,s.kt)("h4",{id:"parameters-type-form"},"Parameters Type FORM"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\nList<List<Object>> parameters = Arrays.asList(Arrays.asList("username", "john"), Arrays.asList("password","1234"));\napi.post("serviceName").setParameters(parameters, RestActions.ParametersType.FORM).perform();\n')),(0,s.kt)("h4",{id:"parameters-type-query"},"Parameters Type QUERY"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\nList<List<Object>> parameters = Arrays.asList(Arrays.asList("search", "john"), Arrays.asList("orderBy","desc"));\napi.get("serviceName").setParameters(parameters, RestActions.ParametersType.QUERY).perform();\n')),(0,s.kt)("h3",{id:"set-url-arguments"},"Set URL Arguments"),(0,s.kt)("p",null,"Sets the url arguments (if any) for the API request that you're currently building."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").setUrlArguments("username=john&password=1234").perform();\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("https://jsonplaceholder.typicode.com");\napi.get("/comments").setUrlArguments("postId=1").setTargetStatusCode(201).perform();\n')),(0,s.kt)("h3",{id:"add-config"},"Add Config"),(0,s.kt)("p",null,"Append a config to the current session to be used in the current and all the following requests."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\nRestAssured.config = RestAssured.config().redirect(RedirectConfig.redirectConfig().followRedirects(false));\napi.post("serviceName").addConfig(RestAssured.config).perform();\n')),(0,s.kt)("p",null,"You can also use it directly without a request method to be used for all the following requests."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName");\nRestAssured.config = RestAssured.config().redirect(RedirectConfig.redirectConfig().followRedirects(false));\napi.addConfig(RestAssured.config).perform();\n')),(0,s.kt)("h3",{id:"enable-url-encoding"},"Enable URL Encoding"),(0,s.kt)("p",null,"Tells whether REST Assured should automatically encode the URI if not defined explicitly. Note that this does not affect multipart form data. Default is true."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").enableUrlEncoding(false).perform();\n')),(0,s.kt)("h3",{id:"use-relaxed-https-validation"},"Use Relaxed HTTPS Validation"),(0,s.kt)("p",null,"set useRelaxedHTTPSValidation configuration to trust all hosts regardless if the SSL certificate is invalid in the request builder 'SSL' is the protocol name by default"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.get("serviceName").useRelaxedHTTPSValidation().perform();\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.get("serviceName").useRelaxedHTTPSValidation("SSL").perform();\n')),(0,s.kt)("h3",{id:"append-default-content-charset-to-content-type-if-undefined"},"Append Default Content Charset To Content Type If Undefined"),(0,s.kt)("p",null,"Tells whether REST Assured should automatically append the content charset to the content-type header if not defined explicitly. Note that this does not affect multipart form data. Default is true."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SHAFT.API api = new SHAFT.API("serviceURI");\napi.post("serviceName").appendDefaultContentCharsetToContentTypeIfUndefined(false).perform();\n')),(0,s.kt)("br",null),(0,s.kt)("br",null),(0,s.kt)("h4",{id:"-please-check-the-response-validations-as-we-can-make-many-assertions-and-verifications-on-api-response-by-using-the-class-restvalidationsbuilder-"},(0,s.kt)("em",{parentName:"h4"},(0,s.kt)("strong",{parentName:"em"}," ","*","Please check the ",(0,s.kt)("a",{parentName:"strong",href:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/docs/Response"},"Response Validations")," as we can make many assertions and verifications on API response by using the Class ",(0,s.kt)("a",{parentName:"strong",href:"https://shafthq.github.io/SHAFT_ENGINE/apidocs/com/shaft/validation/RestValidationsBuilder.html"},"RestValidationsBuilder"),"*"," "))),(0,s.kt)("h2",{id:"sample-code-snippet"},"Sample Code Snippet"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public class Test_Api {\n    SHAFT.API api;\n\n    @Test\n    public void test_get() {\n        api = new SHAFT.API("https://jsonplaceholder.typicode.com");\n        api.get("/users").perform();\n        api.assertThatResponse().extractedJsonValue("$[?(@.name==\'Chelsey Dietrich\')].id").isEqualTo("5").perform();\n    }\n    \n    @Test\n    public void test_post() {\n        api = new SHAFT.API("https://reqres.in/");\n        String body = """\n                {\n                    "name": "morpheus",\n                    "job": "leader"\n                }""";\n        api.post("api/users").setRequestBody(body).setTargetStatusCode(201).setContentType(ContentType.JSON).perform();\n        api.assertThatResponse().extractedJsonValue("name").isEqualTo("morpheus").withCustomReportMessage("Check that Morpheus exists.").perform();\n    }\n\n}\n')))}d.isMDXComponent=!0}}]);