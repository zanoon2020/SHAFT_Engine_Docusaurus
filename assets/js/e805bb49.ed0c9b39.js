"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[7355],{4137:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>p});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)i=o[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)i=o[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=c(i),f=n,p=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return i?a.createElement(p,s(s({ref:t},d),{},{components:i})):a.createElement(p,s({ref:t},d))}));function p(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,s=new Array(o);s[0]=f;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:n,s[1]=r;for(var c=2;c<o;c++)s[c]=i[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}f.displayName="MDXCreateElement"},9616:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=i(7462),n=(i(7294),i(4137));const o={id:"Files",title:"File",sidebar_labe:"File"},s=void 0,r={unversionedId:"Keywords/Validations/Files",id:"Keywords/Validations/Files",title:"File",description:"We can make many assertions and verifications on files by using the Class FileValidationsBuilder through using the following methods:",source:"@site/docs/Keywords/Validations/Files.md",sourceDirName:"Keywords/Validations",slug:"/Keywords/Validations/Files",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Files",draft:!1,editUrl:"https://github.com/ShaftHQ/SHAFT_Engine_Docusaurus/blob/master/docs/Keywords/Validations/Files.md",tags:[],version:"current",frontMatter:{id:"Files",title:"File",sidebar_labe:"File"},sidebar:"docs",previous:{title:"API",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Response"},next:{title:"Object",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Objects"}},l={},c=[{value:"We can make many assertions and verifications on files by using the <em>Class FileValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-files-by-using-the-class-filevalidationsbuilder-through-using-the-following-methods",level:4},{value:"exists():",id:"exists",level:3},{value:"doesNotExist():",id:"doesnotexist",level:3},{value:"checksum():",id:"checksum",level:3},{value:"content():",id:"content",level:3}],d={toc:c};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"we-can-make-many-assertions-and-verifications-on-files-by-using-the-class-filevalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on files by using the ",(0,n.kt)("em",{parentName:"h4"},"Class FileValidationsBuilder")," through using the following methods:"),(0,n.kt)("h3",{id:"exists"},"exists():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check if a certain file exists."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).exists().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).exists().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"doesnotexist"},"doesNotExist():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check if a certain file does not exist."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).doesNotExist().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).doesNotExist().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"checksum"},"checksum():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to calculate and check a certain file checksum to confirm if it has the exact same content or not."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).checksum().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).checksum().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"content"},"content():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to attempt to read and validate a certain file content (works for PDF and TEXT files)."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().file(folderRelativePath, file name).content().perform();\n        //make verification\n        Validations.verifyThat().file(folderRelativePath, file name).content().perform();\n    }\n}\n")))}u.isMDXComponent=!0}}]);