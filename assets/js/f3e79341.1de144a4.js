"use strict";(self.webpackChunkshaft_user_guide=self.webpackChunkshaft_user_guide||[]).push([[3942],{4137:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),d=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=d(e.components);return i.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=d(a),p=n,h=c["".concat(o,".").concat(p)]||c[p]||u[p]||r;return a?i.createElement(h,l(l({ref:t},m),{},{components:a})):i.createElement(h,l({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var d=2;d<r;d++)l[d]=a[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9295:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=a(7462),n=(a(7294),a(4137));const r={id:"Elements",title:"Element",sidebar_labe:"Element"},l=void 0,s={unversionedId:"Keywords/Validations/Elements",id:"Keywords/Validations/Elements",title:"Element",description:"We can make many assertions and verifications on web elements by using the Class WebDriverElementValidationsBuilder through using the following methods:",source:"@site/docs/Keywords/Validations/Elements.md",sourceDirName:"Keywords/Validations",slug:"/Keywords/Validations/Elements",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Elements",draft:!1,editUrl:"https://github.com/ShaftHQ/SHAFT_Engine_Docusaurus/blob/master/docs/Keywords/Validations/Elements.md",tags:[],version:"current",frontMatter:{id:"Elements",title:"Element",sidebar_labe:"Element"},sidebar:"docs",previous:{title:"Browser",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Browser"},next:{title:"API",permalink:"/SHAFT_Engine_Docusaurus/docs/Keywords/Validations/Response"}},o={},d=[{value:"We can make many assertions and verifications on web elements by using the <em>Class WebDriverElementValidationsBuilder</em> through using the following methods:",id:"we-can-make-many-assertions-and-verifications-on-web-elements-by-using-the-class-webdriverelementvalidationsbuilder-through-using-the-following-methods",level:4},{value:"exists():",id:"exists",level:3},{value:"doesNotExist():",id:"doesnotexist",level:3},{value:"matchesReferenceImage():",id:"matchesreferenceimage",level:3},{value:"doesNotMatchReferenceImage():",id:"doesnotmatchreferenceimage",level:3},{value:"attribute():",id:"attribute",level:3},{value:"isSelected():",id:"isselected",level:3},{value:"isChecked():",id:"ischecked",level:3},{value:"isVisible():",id:"isvisible",level:3},{value:"isEnabled():",id:"isenabled",level:3},{value:"isNotSelected():",id:"isnotselected",level:3},{value:"isNotChecked():",id:"isnotchecked",level:3},{value:"isHidden():",id:"ishidden",level:3},{value:"isDisabled():",id:"isdisabled",level:3},{value:"text():",id:"text",level:3},{value:"textTrimmed():",id:"texttrimmed",level:3}],m={toc:d};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"we-can-make-many-assertions-and-verifications-on-web-elements-by-using-the-class-webdriverelementvalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on web elements by using the ",(0,n.kt)("em",{parentName:"h4"},"Class WebDriverElementValidationsBuilder")," through using the following methods:"),(0,n.kt)("h3",{id:"exists"},"exists():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the target element exists. "),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation. ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).exists().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).exists().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"doesnotexist"},"doesNotExist():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the target element does not exist. "),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotExist().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotExist().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"matchesreferenceimage"},"matchesReferenceImage():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the target element matches a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance. This method returns."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).matchesReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).matchesReferenceImage().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"doesnotmatchreferenceimage"},"doesNotMatchReferenceImage():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check that the target element does not match a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance."),(0,n.kt)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"attribute"},"attribute():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against a certain element attribute if it is isEqualTo, Contians, equals, doesNotEqual, doesNotContain, isTrue, isFalse, ..."),(0,n.kt)("li",{parentName:"ul"},"Needed parameters: elementAttribute - the target element attribute that will be checked against."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation. "),(0,n.kt)("li",{parentName:"ul"},"Note that we can make other validations upon the attribute like:\n",(0,n.kt)("em",{parentName:"li"},"isTrue")," , ",(0,n.kt)("em",{parentName:"li"},"isFalse"),", ",(0,n.kt)("em",{parentName:"li"},"isEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"equals"),", ",(0,n.kt)("em",{parentName:"li"},"contains"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotContain"),", ",(0,n.kt)("em",{parentName:"li"},"isNull"),", ",(0,n.kt)("em",{parentName:"li"},"isNotNull"),", etc. ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).attribute(attributeName).perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).attribute(attributeName).perform();\n    }         \n}     \n")),(0,n.kt)("h3",{id:"isselected"},"isSelected():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements selected attribute"),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isSelected().perform();\n        }\n}\n")),(0,n.kt)("h3",{id:"ischecked"},"isChecked():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements checked attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isChecked().perform();\n        }\n}\n")),(0,n.kt)("h3",{id:"isvisible"},"isVisible():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements hidden attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isVisible().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isVisible().perform();\n        }\n}\n")),(0,n.kt)("h3",{id:"isenabled"},"isEnabled():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements disabled attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isEnabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isEnabled().perform();\n        }\n}\n")),(0,n.kt)("h3",{id:"isnotselected"},"isNotSelected():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements selected attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotSelected().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"isnotchecked"},"isNotChecked():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements checked attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotChecked().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"ishidden"},"isHidden():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements hidden attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isHidden().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isHidden().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"isdisabled"},"isDisabled():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements disabled attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isDisabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isDisabled().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"text"},"text():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We use this method to check against the provided elements text attribute."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation."),(0,n.kt)("li",{parentName:"ul"},"Note that we can make other validations upon the attribute like:\n",(0,n.kt)("em",{parentName:"li"},"isTrue")," , ",(0,n.kt)("em",{parentName:"li"},"isFalse"),", ",(0,n.kt)("em",{parentName:"li"},"isEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"equals"),", ",(0,n.kt)("em",{parentName:"li"},"contains"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotContain"),", ",(0,n.kt)("em",{parentName:"li"},"isNull"),", ",(0,n.kt)("em",{parentName:"li"},"isNotNull"),", etc.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).text().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).text().perform();\n    }\n}\n")),(0,n.kt)("h3",{id:"texttrimmed"},"textTrimmed():"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We Use this to check against the provided elements text attribute after it's trimmed (all leading and trailing space removed)."),(0,n.kt)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation."),(0,n.kt)("li",{parentName:"ul"},"Note that we can make other validations upon the attribute like:\n",(0,n.kt)("em",{parentName:"li"},"isTrue")," , ",(0,n.kt)("em",{parentName:"li"},"isFalse"),", ",(0,n.kt)("em",{parentName:"li"},"isEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotEqualTo"),", ",(0,n.kt)("em",{parentName:"li"},"equals"),", ",(0,n.kt)("em",{parentName:"li"},"contains"),", ",(0,n.kt)("em",{parentName:"li"},"doseNotContain"),", ",(0,n.kt)("em",{parentName:"li"},"isNull"),", ",(0,n.kt)("em",{parentName:"li"},"isNotNull"),", etc.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).textTrimmed().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).textTrimmed().perform();\n    }\n}\n")))}c.isMDXComponent=!0}}]);